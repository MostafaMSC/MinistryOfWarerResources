@*@page "/AddNewDept"

@using MinistryOfWarerResources.BackEnd.Interfaces;
@using MinistryOfWarerResources.Models;


@inject IOffice _Office
@inject IDepts _Dept
@inject IJSRuntime _js


<form @onsubmit="SaveDept">*@
        @*<div class="row">
            <div class="col">
                <select class="form-control" @bind="NewDep.OfficeTableId">
                    <option>اختر اسم الدائرة التي ينتمي اليها القسم</option>
                    @foreach (var item in ListOfAllOffices)
                    {
                        <option value="@item.Id">@item.OfficeName</option>
                    }
                </select>
            </div>
            
        </div>*@
        @*<br />
    
    <MudItem>
        <MudTextField Label="ادخل اسم القسم الذي تود اضافتها" Variant="Variant.Outlined" @bind-Value="NewDep.DepName" />
        <br />

        <MudButton FullWidth ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Album" IconColor="Color.Secondary" Size="Size.Large">اضافة القسم</MudButton>
    </MudItem>
</form>

@code {



    public List<OfficeModel> ListOfAllOffices { get; set; } = new List<OfficeModel>();
    public DepModel NewDep { get; set; } = new DepModel();*@


    @*// override+space+OnInitializedAsync+tab
    protected override async Task OnInitializedAsync()
    {
        ListOfAllOffices = await _Office.GetAllOffices();
    }


    private async Task SaveDept()
    {
        var UserResponse = await _js.InvokeAsync<bool>("confirm", "Are You sure to add the dep?");

        if (UserResponse is true)
        {
            var BackEndResponse = await _Dept.AddDeptToDb(NewDep);
            await _js.InvokeVoidAsync("alert", BackEndResponse);
        }else
        {
            return;
        }
    }



}
*@