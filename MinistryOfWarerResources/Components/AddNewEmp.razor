@*@page "/AddNewEmp"
@using MinistryOfWarerResources.Components;
@using Microsoft.EntityFrameworkCore;
@using MinistryOfWarerResources.BackEnd.Interfaces;
@using MinistryOfWarerResources.Data;
@using MinistryOfWarerResources.Models;

@inject IJSRuntime _js
@inject IWebHostEnvironment _env
@inject ApplicationDbContext _db
@inject IEmp _Emp


<div style="border:solid;padding:20px;background-color:whitesmoke;border-color:lightblue;border-radius:20px;">
    <EditForm OnValidSubmit="SaveData" Model="EmpData">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row row-cols-lg-3 row-cols-md-2 row-cols-sm-1 row-cols-1">
            <div class="col">
                <label>Please Enter Full Name</label>
                <InputText @bind-Value="EmpData.EmpFullName" placeholder="Full Name" class="form-control" />
            </div>
            <div class="col">
                <label>Your Id Number</label>
                <input maxlength="14" min="14" @bind-value="@EmpData.EmpNumber" type="text" placeholder="Emp Id" class="form-control" />
            </div>
            <div class="col">
                <label>Your Age please </label>
                <input @bind-value="@EmpData.EmpAge" type="number" placeholder="Example.. 25 , 30 ,40....etc" class="form-control" />
            </div>
        </div>


        <br />
        <div class="row row-cols-lg-3 row-cols-md-2 row-cols-sm-1 row-cols-1">
            <div class="col">
                <label>Please Enter Your Salary</label>
                <input @bind-value="@EmpData.EmpSalary" type="number" class="form-control" />
            </div>

            <div class="col">
                <label>Office</label>
                <select class="form-control" @onchange="FilterDepData">
                    <option>Please Select Office</option>
                    @foreach (var item in ListOfOffices)
                    {
                        <option value="@item.Id">@item.OfficeName</option>
                        // Bachelor Degree
                    }
                </select>
            </div>
            <div class="col">
                <label>Department</label>
                <select class="form-control" @bind="EmpData.EmpDep">
                    <option>Please Select Dept</option>
                    @foreach (var item in ListOfFilteredDepts)
                    {
                        <option value="@item.Id">@item.DepName</option>
                    }
                </select>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col">
                <label>Status</label>
                <select class="form-control" @bind="EmpData.EmploymentStatus">
                    <option>Select Status</option>
                    <option value="Contract">Contract</option>
                    <option value="Perminant">Perminant</option>
                    <option value="Daily Wages">Daily Wages</option>
                    <option value="Space Man">Space Man</option>
                </select>
            </div>
            <div class="col">
                <label>City</label>
                <select class="form-control" @bind="EmpData.City">
                    <option>Emp City</option>
                    <option value="Baghdad">Baghdad</option>
                    <option value="Basra">Basra</option>
                    <option value="Babel">Babel</option>
                    <option value="Kut">Kut</option>
                </select>
            </div>
            <div class="col">
                <label>Date Of Employemnt</label>
                <input type="date" class="form-control" @bind-value="EmpData.DateOfEmployemnt" />
            </div>
        </div>

        <br />
        <InputFile accept=".png,.jpg,.jpeg" class="form-control" OnChange="CheckFile" />

        <br />
        <button class="btn btn-primary form-control">Save Emp</button>
    </EditForm>
</div>

@code {

    public List<OfficeModel> ListOfOffices { get; set; } = new List<OfficeModel>();
    public List<DepModel> ListOfDepts { get; set; } = new List<DepModel>();
    public EmpModel EmpData { get; set; } = new EmpModel();
    public List<DepModel> ListOfFilteredDepts { get; set; } = new List<DepModel>();

    public InputFileChangeEventArgs UplaodedUserImage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListOfOffices = await _db.OfficeTable.ToListAsync();
        ListOfDepts = await _db.DepTable.Include(a => a.OfficeTable).ToListAsync();
        EmpData.DateOfEmployemnt = DateTime.Now;
    }
    private void FilterDepData(ChangeEventArgs args)
    {
        var Id = int.Parse(args.Value.ToString());
        ListOfFilteredDepts = ListOfDepts.Where(a => a.OfficeTableId == Id).ToList();
    }

    private async Task SaveData()
    {
        var UserResponse = await _js.InvokeAsync<bool>("confirm", "Are you sure to add the User");
        if (UserResponse)
        {
            var CheckUserExists = await _Emp.CheckIfUserExistsInDB(EmpData.EmpNumber);
            if (CheckUserExists is true)
            {
                await _js.InvokeVoidAsync("alert", $"The Emp : {EmpData.EmpFullName} Already Exists it the system");
            }
            else
            {
                EmpData.EmpImagePath = await UploadUserImageToFileSystem();
                var BackEndResponse = await _Emp.AddNewEmpToTheSystem(EmpData);

                await _js.InvokeVoidAsync("alert", BackEndResponse);
                EmpData = new EmpModel();

            }
        }
    }

    private async Task CheckFile(InputFileChangeEventArgs UploadedFile)
    {
        if (UploadedFile.File.ContentType == "image/png" || UploadedFile.File.ContentType == "image/jpeg")
        {
            if (UploadedFile.File.Size > 2000000)
            {
                await _js.InvokeVoidAsync("alert", "Image Size larger than 2 MB please upload an image less that 2MB");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Everything Looks Good");
                UplaodedUserImage = UploadedFile;
            }

        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Please Upload png or jpeg Image File");
            return;
        }
    }
    private async Task<string> UploadUserImageToFileSystem()
    {

        var FileName = EmpData.EmpFullName + "_" + Guid.NewGuid().ToString() + $"{UplaodedUserImage.File.Name}";
        // MohammedAbdull_109273918628736127835gbegt675e
        var FolderPath = $"{_env.WebRootPath}\\EmpImages";
        // var FullPath = //server/wwwroot/EmpImages/FileName
        var FullPath = Path.Combine(FolderPath, FileName);

        var MemoryStream = new MemoryStream();
        await UplaodedUserImage.File.OpenReadStream(2000000).CopyToAsync(MemoryStream);

        // FileMode : to give permission to the filestream to create files
        await using (var fs = new FileStream(FullPath, FileMode.Create, FileAccess.Write))
        {
            MemoryStream.WriteTo(fs);
        }
        return FullPath;
    }
}*@