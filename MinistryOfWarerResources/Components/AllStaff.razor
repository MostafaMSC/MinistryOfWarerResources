@page "/AllDawas"

@using System.Net.Http.Json
@using MinistryOfWarerResources.BackEnd.Interfaces;
@using MinistryOfWarerResources.Dialogs;
@using MinistryOfWarerResources.Models;
@inject IDialogService _Dialog
@inject IDawa _Dawa
@inject IJSRuntime _js
@inject ISnackbar _Sb
@attribute [Authorize(Roles = "DawaView,admin,admin2")]

<MudDataGrid  HorizontalScrollbar="true" Striped="true" Elevation="18" Bordered="true" Style="background-color:ghostwhite; border:solid;padding:20px;border-color:lightblue;border-radius:20px;margin-left:20px ;margin-right:20px" T="DaawaModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                 Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h5">جدول الدعاوى</MudText>

                    <MudButton @onclick="DeleteDawas" Variant="Variant.Filled" style="margin-right:40px" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"><b>حذف</b></MudButton>

            <MudSpacer />
            <MudTextField FullWidth @bind-Value="_searchString" Placeholder="بحث" Adornment="Adornment.Start" Immediate="true" 
                           AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns   >  
            <SelectColumn T="DaawaModel"/>
            <PropertyColumn Property="x => x.SelectDawa" Title="الدعوى" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.DawaNumber" Title="رقم الدعوى" />
            <PropertyColumn Property="x => x.DawaType" Title="نوع الدعوى"  SortBy="@_sortBy" />
            <PropertyColumn Property="x => x.Name1" Title="المدعي" />
            <PropertyColumn Property="x => x.Name2" Title="المدعى عليه" />
            <PropertyColumn Property="x => x.DawaSubject" Title="الموضوع" />
            <PropertyColumn Property="x => x.Court" Title="المحكمة" />
            <PropertyColumn Property="x => x.Office" Title="الدائرة" />
            @*<PropertyColumn Property="x => x.AkherALajraaat" Title="اخر الاجراءات" />
            <PropertyColumn Property="x => x.qraraadaNO" Title="رقم قرار الادعاء" />
            <PropertyColumn Property="x => x.AstanafNO" Title="رقم قرار الاستئناف" />
            <PropertyColumn Property="x => x.TameezNO" Title="رقم قرار التمييز" />*@

            <TemplateColumn >
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.EditNote" OnClick="(()=>StartedEditingItemFunction(context.Item))"  />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="DaawaModel" />
        </PagerContent>
</MudDataGrid>
@code {
    private IEnumerable<DaawaModel> Elements = new List<DaawaModel>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    public List<DaawaModel> ListOfDeletedDawas { get; set; } = new List<DaawaModel>();

    // custom sort by name length
    private Func<DaawaModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.SelectDawa.Length;
        else
            return x.SelectDawa;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<DaawaModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.SelectDawa.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // if (x.DeptTable.OfficeTable.OfficeName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;

        if ($"{x.DawaNumber} {x.LastUpdate.ToString()} {x.DawaType}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await _Dawa.GetAllDawas();
    }


    // events
    void RowClicked(DataGridRowClickEventArgs<DaawaModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<DaawaModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
        ListOfDeletedDawas = items.ToList();
    }

    private async Task DeleteDawas()
    {
        var Response = await _js.InvokeAsync<bool>("confirm", "هل انت متاكد من الحذف");
        if (Response)
        {
            var BackEndREsponse = await _Dawa.DeleteListOfDawas(ListOfDeletedDawas.Select(a => a.Id).ToList());
            _Sb.Add(BackEndREsponse, Severity.Success);
            Elements = await _Dawa.GetAllDawas();
        }
        else
        {
            return;
        }

    }
    private async Task StartedEditingItemFunction(DaawaModel item)
    {

        //_Nav.NavigateTo($"/EditEmp/{item.Id}");
        var Parameters = new DialogParameters();
        Parameters.Add("Id", item.Id);
        var ModalOptions = new DialogOptions();
        ModalOptions.MaxWidth = MaxWidth.Medium;
        ModalOptions.FullWidth = true;
        ModalOptions.CloseButton = true;
        ModalOptions.CloseOnEscapeKey = true;
        ModalOptions.Position = DialogPosition.Center;

        await _Dialog.ShowAsync<EditEmpDialog>("تحديث الدعوى", Parameters, ModalOptions);
    }

    void CanceledEditingItem(DaawaModel item)
    {
    }

    async Task CommittedItemChanges(DaawaModel item)
    {

    }


}